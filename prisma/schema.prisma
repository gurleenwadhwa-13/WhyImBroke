// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum AccountType {
  SAVINGS
  CHEQUING
}

enum CurrencyList {
  CAD
  USD
  INR
}

enum TransactionType {
  EXPENSE
  INCOME
}

enum RecurringIntervalList {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}


// Models
model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  clerkUserId         String         @unique
  name                String?
  imageURL            String?
  transactions        Transaction[]
  budgets             Budget[]
  accounts            Account[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@map("users")
}

model Account {
  id                  String         @id @default(uuid())
  name                String
  type                AccountType
  balance             Decimal        @default(0)
  currency            CurrencyList
  isDefault           Boolean        @default(false)
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions        Transaction[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([userId])
  @@map("accounts")

}

model Transaction {
  id                  String                  @id @default(uuid())
  type                TransactionType
  amount              Decimal
  description         String?
  date                DateTime
  category            String
  receiptURL          String?
  isRecurring         Boolean                 @default(false)
  recurringInterval   RecurringIntervalList
  nextRecurringDate   DateTime?
  lastProcessed       DateTime?
  status              TransactionStatus       @default(COMPLETED)
  userId              String
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId           String
  account             Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")

}

model Budget {
  id                  String              @id @default(uuid())
  amount              Decimal
  lastAlertSent       DateTime?
  userId              String              @unique
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@index([userId])
  @@map("budgets")
}


