generator client {
  provider = "prisma-client-js"
  output   = "lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  clerkUserId  String        @unique
  name         String?
  imageURL     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  budgets      Budget?
  transactions Transaction[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  currency     CurrencyList
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String                @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptURL        String?
  isRecurring       Boolean               @default(false)
  recurringInterval RecurringIntervalList?
  nextRecurringDate DateTime?
  lastProcessed     DateTime?
  status            TransactionStatus     @default(COMPLETED)
  userId            String
  accountId         String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  account           Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id            String    @id @default(uuid())
  amount        Decimal
  lastAlertSent DateTime?
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

enum AccountType {
  SAVINGS
  CHEQUING
}

enum CurrencyList {
  CAD
  USD
  INR
}

enum TransactionType {
  EXPENSE
  INCOME
}

enum RecurringIntervalList {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  YEARLY
  NONE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
